#+title: Notions
#+date: <2015-09-10 Thu>
#+author: William Clifford
#+email: wobh@yahoo.com
#+description: General notions
#+keywords:
 
* Making

- process -> ? (product)
  - materials
  - technique

#+NAME: makings-table
| action    | agent       | end                     | counteract        |
|-----------+-------------+-------------------------+-------------------|
| make      | maker       | (making)                | break             |
| create    | creator     | creation, creature      |                   |
| produce   | producer    | product, production     |                   |
| construct | constructor | construction, structure | destruct          |
| -facture  | factory     |                         |                   |
| compose   | composer    | composition             | depose, decompose |
| arrange   | arranger    | arrangement             | derange           |
| build     | builder     | building                |                   |
| assemble  | assembler   | assembly, semblance     | disassemble       |
| gather    | gatherer    | gathering               | scatter           |

** constructure

- form
- mold
- shape
- sculpt

** destructure

- destroy
- fall
  - collapse
  - implode
- throw
  - hurl
  - fling
  - explode
  - reject
- break
- cut
  - split
  - slice
  - chop
  - chomp
- crush
- burn
  - dissolve
- kill
  - slay
  - murder
- pierce
  - puncture

* Keeping

#+NAME: makings-table
| action | agent  | end     | counteract |
|--------+--------+---------+------------|
| keep   | keeper | keeping |            |
| store  | store  | storing |            |
| hold   | holder | holding |            |
| bind   | binder | binding | unbind     |

- bind
  - tie
  - constrain
  - restrain
  - confine

- analogies
  - set:element
  - group:member
  - collection:item
  - variable:value (see [[*Typing]])

* Asking

- ask
  - query
    - inquire
    - require
    - question
      - request
- answer
  - reply
    - respond
      - response
  - cognovit

** Query languages
- Structured Query Language
- Gellish
- Datalog

** negotiation
- bid, offer, tender

* Moving

** event

| action | agent | end    | counteract |
|--------+-------+--------+------------|
| move   | mover | moving | stay       |

** world

- distance relation of places
  - metric
- composition of places

: - : move move -> move
: - : spot spot -> move
: - : move spot -> spot

: + : move move -> move
: + : spot move -> spot
: + : spot spot -> spot

origin
source
target
 
*** references

- http://www.nacgeo.com Natural Area Code
  - https://en.wikipedia.org/wiki/Natural_Area_Code
- http://geohash.org Geohash
  - https://en.wikipedia.org/wiki/Geohash
- http://wiki.openstreetmap.org/wiki/QuadTiles

** space

- interval
- distance
- duration

- direct
- orient
  - turn
  - spin
  - face

- position
- size

- direction
- magnitude

** where

- occur
- occupy
- inhabit
- coincide

*** gather

- gather
- collect
- coalesce
- cohere
- dilation
- compress
- arrive
- enter
- focus
- deliver
- entangle
- associate
- assign
- join
- marry
- pair
- connect

*** scatter

- leave
- spread
- scatter
- dispense
- disperse
- disinter
- dissolve
- displace
- displant
- diffract
- dislodge
- dispatch

** when

- start
  - begin
  - commence
- stop
  - halt
  - cease

* Turning

- affine
- scalar
- vector
- tensor

- vertex
- matrix

- spline

- difference

- orientation
- displacement

- complect
- simplect

- collapse

- disjunction
- conjunction

* Naming
- praenomen
- cognomen
- agnomen

* Warning (Boding)

- disaster
- dishonor
- dissuade
- foretell
- portend
- predict

* Mapping

A "pure" function is often described as a mapping of inputs and
outputs. So we should be able to see a correspondence in interfaces
between functions and mappings. Something like this:

| get | fetch | call | read   | GET  | extract |
| set | store | defn | create | POST | extend  |

: get → map → key → val
: set → map → key → val → map

For some kinds of "maps" (stacks and queues) a "key" isn't
necessary. The semantics here are "pop/pull" and "put/push" rather
than "get" or "set".

: pop → map → val
: put → map → val → map

* Typing

- type, category, group, etc

Not strictly mathematical, but an impressionistic gathering of "kinds"

(TODO I could really use something like a "grammar of types" here)

Data types:

- numbers
  - integers
  - rationals
  - floating point
  - complex (at least three different kinds)
- sets (unordered collection)
  - "hash", "associative-array"
  - records
- tuples (ordered collections)
  - "arrays"
  - "vectors"
  - "strings"
- characters
  - potentially a kind of "number"
- lists (ordered collection, using linked lists)
  - trees

Entity types:

- Agent: 
  - Person
  - Process
  - Organization
- Name:
  - long
  - short
  - agent proxies
    - phone
    - email
    - website
    - ...
- Datetime:
  - Date
  - Time
  - Duration
  - Range
- Place:
  - Postal Address
  - LatLong
  - Name
- Order:
  - numeric
  - lexigraphic, see name
- Count:
  - aggregations of all kinds really (including Collections)
    - total
    - average
    - minimum
    - maximum
    - ...
- Purpose:
  - Reason
  - Comment
  - Note
- Description:
- Pattern:
  - Regular Expression
- Kind
  - type
  - group
  - category
  - classification
    - "tag" or "label"

Type-referring prepositions
- _on :: Date
- _at :: Datetime || Place
- _by :: Agent
- _to :: Agent, receiver || Place
- _from :: Agent, provider || Place
- _for :: Purpose || Duration
- _with :: Agent
- _until :: Datetime
- _since :: Datetime
- _like :: Pattern
- _of :: Kind || Agent
- _the :: Kind
  - _by_the :: Kind, agents
- _in :: Kind, groups
  - _in_the :: Kind, counts 

* Grouping

- collection, stock, store, list
  - item
  - singleton (
  - member (ruby-on-rails)
- table
  - rows
    - columns
- group
  - member

Sometimes "things" may be considers "groups" of "properties"

- record
  - field
    - name, label
    - value
    - type
- object
  - attribute
  - relationship
- relation
  - ?
  - references
- model
  - property

* Testing
** concepts
- phenomenon :: happenings, events
- observation :: a record of phenomena
- hypothesis :: proposal, supposition, conjecture about relations
                between phenomena
- prediction :: expectation, outlook, forecast
- experiment :: test, prove, probe, poke, prod
- procedure :: process, steps in verifying or falsifying hypothesis
- subject :: what is expected to change as a result of the process
  - dependent or response variable
- control :: a non-tested comparable, or constant, invariant
  - independent or explanatory variable
- result :: outcome, actual
- reproducible :: recurring, replicable, non-coincedental
- theory :: reproducible results

* COMMENT org settings
#+options: ':nil *:t -:t ::t <:t H:6 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.6.1)
#+cite_export:
#+startup: overview
