#+TITLE: Naming Things for Web Development
#+DATE: <2019-08-24 Sat>
#+AUTHOR: William Clifford
#+EMAIL: wobh@yahoo.com

* Uniform Resource Identifier (URI)

: URI = scheme:[//authority]path[?query][#fragment]

: authority = [userinfo@]host[:port]

Interesting to note that the ~authority~ component is optional, and
dependant on the scheme. A URI like:

: file:///

seems like it should be considered invalid, although, what it could be
saying is that ~/~ is a valid authority for the ~file~ schema.

** Uniform Resource Name (URN)
** Uniform Resource Location (URL)
* HTML
** elements
** attributes
*** id

Should correspond to an acceptable fragment value.

Should be an "opaque" string

https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id


*** class

https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
*** name
Nowadays, only used for form fields (eg. input, select textarea) ...
*** data-*

the dataset API converts attributes like ~data-foo-bar~ to ~fooBar~

https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*

**** Data attributes used in Bootstrap
https://stackoverflow.com/a/38341753

The feature distinguishing attribute is ~data-toggle~ which uses the
following values:

- ~modal~
- ~popover~
- ~collapse~
- ~dropdown~
- ~scroll~
- ~tab~/~pill~
- ~tooltip~
- ~button~

There's also:

- ~data-ride=carousel~
- ~data-spy=affix~

*** aria

ARIA attributes describe relations between elements

*** role

Should be a valid ARIA role

* CSS
** selectors
* ARIA
** roles
** aria
* Events
- event :: object (usually a string) which is communicated through DOM
           by "bubbling"
- listener :: function which recieves event
- target :: element which listener is associated with: origin, source
- currentTarget :: element which the element has bubbled up whose
                   which listener has run: target
- dispatch :: the action of signalling or triggering the event on a
              target element.
* General
** Things that need names
- URIs
- models
  - features
    - actions
    - effects
- roles
  - dialogs
  - forms
  - inputs
- events
  - dispatchers
  - listeners
- selectors
  - ids
  - classnames
- data-attributes
  - keys
  - values
** Basics

- ~FooBar~ a class, object, model or namespace
- ~bazQux~ a function/method, or variable
- ~zot-wat~ a classname

** The Perils of Identifiers

Uses of the ~id~ in the ~id~ attribute:

- fragments: ~https://example.com#idValue~
- selectors: ~#idValue~
- parameters for ~docuemnt~ element finding:
  ~document.getElementById("idValue")~
- in many browsers they are variables in the ~window~ object,
  accessable with either:
  - ~window["idValue"]~
  - ~window.idValue~
- Many ARIA attributes use ids as references
  - an "ID reference" is a single id
  - an "ID reference list" is a list of ids (space separated?)

Two bits of advice are commonly given for ~id~ values:

- they should be unique to the page
- they should be opaque to the user

This last one means developers should not count on users knowing what
the ids are, what their values mean, or that they have any semantic
structure in their value. Except for their use in URL fragments, for
the most part, this second condition is easily met. Even for id's
which developers have given semantically structured values for
purposes of identifying in application code. However ...

These all combine to make coming up with values for ~id~ a potentially
fraught matter, requiring a lot of architectual alignment with page
generation and application configuration. It's advised that values for
~id~ attributes be unique to the page for good reason, but browsers
are also expected to be robust in handling accidental id
reassignments. Since application code might count on certain elements
having certain ~id~ values, duplicates might break the application in
surprising ways.

So it seems to me that a good practice for dealing with ~id~ values
should be generated and passed to applications as configurations. Only
then can uniqueness be guaranteed. Opacity too, can be guaranteed,
even on an application level, making it more robust to change.

** HTTP API names and processes, a detour

Forms elements have two attribute to describe how form contents are
submitted:

- ~action~ attribute is the URI where the form contents are submitted
- ~method~ attribute is the HTTP method of submitting contents; ~POST~
  by default

Here's the, now classic, mapping of URI paths HTTP methods, resources,
and actions:

| resource path | HTTP method | resource type | resource method     |
|---------------+-------------+---------------+---------------------|
| /model        | POST        | collection    | create              |
| /model/{id}   | DELETE      | member        | destroy             |
| /model/{id}   | PATCH       | member        | update              |
| /model/{id}   | PUT         | member        | update/replace      |
|---------------+-------------+---------------+---------------------|
| /model        | GET         | collection    | index/list/retrieve |
| /model/{id}   | GET         | member        | show/read/retrieve  |

These are what make a basic HTTP-based API, although, it should be
noted: none of this, or what follows is prescribed in Fielding's paper
on REST which is much more generic.

For web interfaces there's two common ~GET~ interfaces:

| resource path    | HTTP method | resource type | resource method |
|------------------+-------------+---------------+-----------------|
| /model/new       | GET         | collection    | new             |
| /model/{id}/edit | GET         | member        | edit            |

These both provide forms. Form ~new~ has fields derived from an empty
or default model for creating a new resource:

: <form action="/model" method="POST">...</form>

Form ~edit~ has fields based on an existing resource for updating
them:

: <form action="/model/id" method="PATCH">...</form>

It could use ~PUT~ too.

Interestingly, these could be combined. A domain might support
deriving new resources from existing ones:

| resource path    | HTTP method | resource type | resource method   |
|------------------+-------------+---------------+-------------------|
| /model/{id}/copy | GET         | member        | copy/reply/revise |

Form ~copy~ has fields derived from an existing model, like ~edit~,
but it's has the same action and method as ~new~.

More commonly are variations or extensions of ~index~ to enable
searching, sorting, or filtering the collection to a desired subset:

| resource path   | HTTP method | resource type | resource method |
|-----------------+-------------+---------------+-----------------|
| /model?{params} | GET         | collection    | search          |

What about aggregations? Could these be handled for this resource? I
think it might be reasonable to have something like this as a
variation of ~index~:

| resource path         | HTTP method | resource type | resource method |
|-----------------------+-------------+---------------+-----------------|
| /model/total?{params} | GET         | aggregation   | total           |

However, if you don't mind overloading the representation of the index
method, you could support that with parameters on ~index~.

It's fair to ask what it might mean to ~POST~ to a member resource or
to ~PATCH~ a collection. It's also fair to ask what the point of this
detour was.

To answer these questions together, although I can imagine some
possible uses and names for the speculative methods, but I'm trying to
collect resource methods that are "natural" to the API of a "typical"
web application. More creative uses of these interfaces is a topic of
a presentation I'm working on.

** a model of variable names

*** Roles

Name features after a model in the problem domain. Specialize those
names base on the type of interface the feature has implementations
for. ARIA roles provide a useful ontology of page features, some
examples:

- dialog
- form
- list
- listitem
- document
- article
- application
- button
- input
  - (not an ARIA role, but necessary for form inputs, named after the
    ":input" selector in jQuery.)

This basic ontology of "roles" will serve for naming "Features" we
implement even if the role isn't literally used (although it probably
should be in a few cases).

*** Configurations

Suppose an ~Options~ object provides the generated id's in use on the
page and has mapped them to variables used by the application:

: idModelFeature = Options.idModelFeature

Find the element:

: ModelFeature = document.getElementById( idModelFeature )

Make a selector if necessary:

: selectModelFeature = "#" + $.escapeSelector( idModelFeature )

Would do this for use in jQuery selectors or data attributes which
take selectors as values (looking at you, Bootstrap).

The need for this isn't as strong for classnames, but for classes that
might otherwise get named ~js-my-application-class~ 

: classnameModelFeatures = Options.classnameModelFeatures

(Using ~classname~ is clearer than ~class~ would be).

Get a list of features:

: listModelFeatures = document.getElementsByClassName( classnameModelFeatures )

Or: 

: $listModelFeatures = $( selectModelFeatures )

Setup an event listener. A widespread practice is to name the
function handling the event, ~onThisEventName~:

: ModelFeature.addEventListener( Event, onEvent )

Dispatch an event:

: ModelFeature.dispatchEvent( Event )

In the handler function, presumably you know the ~Model~ context when
you define this. Make the code handling the event target more clear by
assigning it to a variable named after the base feature name:

: feature = event.target 

In a jQuery context:

: ModelFeature.on( Event, onEvent )

Inside the jQuery handler function:

: $feature = $( event.target )

One problem with ~onEvent~ style names is you might have the same
handler for different events. I like the semantics of this:

: ModelFeature.addEventListener( Event, doAction )

This reads even better in jQuery:

: $ModelFeature.on( Event, doAction )

*** Features, Events and Actions

- buttons
  - click
    - may dispatch other events
- dialogs
  - show
    - dispatched by a click, or other
  - hide
    - dispatched by a click, or other
- forms
  - submit
  - change
  - reset
  - dismiss
    - dispatched by submit action, listened for by:
      - form to reset
      - dialog to hide
- lists and tables
  - prepend
    - dispatched by reception of new data
  - append
    - dispatched by reception of new data
  - sort
    - dispatched by click
  - remove
    - dispatched by click
  - filter
    - dispatched by click
** examples
*** Blog
- Model ~Post~
  - Feature ~formNew~
  - Feature ~formEdit~
  - Feature ~listComments~
  - Feature ~buttonDelete~
- Model ~Comment~
  - Feature ~formNew~
  - Feature ~formReply~
- Model ~Author~
  - Feature ~listPosts~
  - Feature ~listComments~

One thing to note of caution here has to do with the "Model" of the
service. Although it's reasonable to name the "Model" after the
problem domain and the service it interacts with, it is different from
the model on the server. 

User data might be represented in several ways, including:

- HTML as values in form fields
- HTML as columns in a table row
- HTML as "key: value" pairs in a record (listitems, generally)
- as "x-www-form-urlencoded" form submission
- as JSON ("application/json") or JSON-API ("application/vnd.api+json")
- as SVG
- as XML

But in most all of these cases, none of it requires the application to
do anything with the user data directly (validation and normalization
being exceptions I don't want to dismiss, but don't want to get
distracted with either).

Mostly, we're talking about browser application whose concerns are
oriented around displaying user data, updating the display, revealing or
concealing elements of that display. Those elements include the user
data, but as "cargo" so to speak. The actual models are the
representations, as form fields, as tables, lists of records, as JSON,
etc. This suggests to me that naming the features of a browser
application should be oriented around those containers and the events
that change what is displayed to the user. Hence, features are named
with role-like names as prefixes, eg. ~listPosts~, ~articlePost~.

*** REA
- Model ~Events~
  - Feature ~rowEvent~
  - Feature ~formNew~
  - Feature ~formEdit~
- Model ~Agents~
- Model ~Resources~
* References
** URI
- https://en.wikipedia.org/wiki/Uniform_Resource_Identifier
- https://tools.ietf.org/html/rfc3986

** HTML id

***  https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id

#+begin_quote
This attribute's value is an opaque string: this means that web
authors must not use it to convey human-readable information.
#+end_quote

** HTML form-controls

*** https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#naming-form-controls:-the-name-attribute

#+begin_quote
Other than isindex, any non-empty value for ~name~ is allowed. An
[[https://infra.spec.whatwg.org/#ascii-case-insensitive][ASCII case-insensitive]] match for the name =_charset_= is special: if
used as the name of a [[https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)][Hidden]] control with no ~value~ attribute, then
during submission the ~value~ attribute is automatically given a value
consisting of the submission character encoding.

The ~name~ IDL attribute must reflect the ~name~ content attribute.
#+end_quote

Avoid names which are also properties of forms:

- =action=
- =method=
- =enctype=
- etc ...
